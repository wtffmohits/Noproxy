import {
  __async
} from "./chunk-MLCSNVBT.mjs";
import { GoogleGenerativeAI } from "@google/generative-ai";
import { z } from "genkit";
import { embedderRef } from "genkit/embedder";
const TaskTypeSchema = z.enum([
  "RETRIEVAL_DOCUMENT",
  "RETRIEVAL_QUERY",
  "SEMANTIC_SIMILARITY",
  "CLASSIFICATION",
  "CLUSTERING"
]);
const GeminiEmbeddingConfigSchema = z.object({
  /**
   * The `task_type` parameter is defined as the intended downstream application to help the model
   * produce better quality embeddings.
   **/
  taskType: TaskTypeSchema.optional(),
  title: z.string().optional(),
  version: z.string().optional()
});
const textEmbeddingGecko001 = embedderRef({
  name: "googleai/embedding-001",
  configSchema: GeminiEmbeddingConfigSchema,
  info: {
    dimensions: 768,
    label: "Google Gen AI - Text Embedding Gecko (Legacy)",
    supports: {
      input: ["text"]
    }
  }
});
const SUPPORTED_MODELS = {
  "embedding-001": textEmbeddingGecko001
};
function defineGoogleAIEmbedder(ai, name, options) {
  var _a;
  let apiKey = (options == null ? void 0 : options.apiKey) || process.env.GOOGLE_GENAI_API_KEY || process.env.GOOGLE_API_KEY;
  if (!apiKey)
    throw new Error(
      "Please pass in the API key or set either GOOGLE_GENAI_API_KEY or GOOGLE_API_KEY environment variable.\nFor more details see https://firebase.google.com/docs/genkit/plugins/google-genai"
    );
  const embedder = (_a = SUPPORTED_MODELS[name]) != null ? _a : embedderRef({
    name,
    configSchema: GeminiEmbeddingConfigSchema,
    info: {
      dimensions: 768,
      label: `Google AI - ${name}`,
      supports: {
        input: ["text"]
      }
    }
  });
  const apiModelName = embedder.name.startsWith("googleai/") ? embedder.name.substring("googleai/".length) : embedder.name;
  return ai.defineEmbedder(
    {
      name: embedder.name,
      configSchema: GeminiEmbeddingConfigSchema,
      info: embedder.info
    },
    (input, options2) => __async(this, null, function* () {
      var _a2;
      const client = new GoogleGenerativeAI(apiKey).getGenerativeModel({
        model: (options2 == null ? void 0 : options2.version) || ((_a2 = embedder.config) == null ? void 0 : _a2.version) || embedder.version || apiModelName
      });
      const embeddings = yield Promise.all(
        input.map((doc) => __async(this, null, function* () {
          const response = yield client.embedContent({
            taskType: options2 == null ? void 0 : options2.taskType,
            title: options2 == null ? void 0 : options2.title,
            content: {
              role: "",
              parts: [{ text: doc.text }]
            }
          });
          const values = response.embedding.values;
          return { embedding: values };
        }))
      );
      return { embeddings };
    })
  );
}
export {
  GeminiEmbeddingConfigSchema,
  SUPPORTED_MODELS,
  TaskTypeSchema,
  defineGoogleAIEmbedder,
  textEmbeddingGecko001
};
//# sourceMappingURL=embedder.mjs.map