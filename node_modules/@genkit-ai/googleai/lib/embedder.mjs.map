{"version":3,"sources":["../src/embedder.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EmbedContentRequest, GoogleGenerativeAI } from '@google/generative-ai';\nimport { EmbedderReference, Genkit, z } from 'genkit';\nimport { embedderRef } from 'genkit/embedder';\nimport { PluginOptions } from './index.js';\n\nexport const TaskTypeSchema = z.enum([\n  'RETRIEVAL_DOCUMENT',\n  'RETRIEVAL_QUERY',\n  'SEMANTIC_SIMILARITY',\n  'CLASSIFICATION',\n  'CLUSTERING',\n]);\nexport type TaskType = z.infer<typeof TaskTypeSchema>;\n\nexport const GeminiEmbeddingConfigSchema = z.object({\n  /**\n   * The `task_type` parameter is defined as the intended downstream application to help the model\n   * produce better quality embeddings.\n   **/\n  taskType: TaskTypeSchema.optional(),\n  title: z.string().optional(),\n  version: z.string().optional(),\n});\n\nexport type GeminiEmbeddingConfig = z.infer<typeof GeminiEmbeddingConfigSchema>;\n\nexport const textEmbeddingGecko001 = embedderRef({\n  name: 'googleai/embedding-001',\n  configSchema: GeminiEmbeddingConfigSchema,\n  info: {\n    dimensions: 768,\n    label: 'Google Gen AI - Text Embedding Gecko (Legacy)',\n    supports: {\n      input: ['text'],\n    },\n  },\n});\n\nexport const SUPPORTED_MODELS = {\n  'embedding-001': textEmbeddingGecko001,\n};\n\nexport function defineGoogleAIEmbedder(\n  ai: Genkit,\n  name: string,\n  options: PluginOptions\n) {\n  let apiKey =\n    options?.apiKey ||\n    process.env.GOOGLE_GENAI_API_KEY ||\n    process.env.GOOGLE_API_KEY;\n  if (!apiKey)\n    throw new Error(\n      'Please pass in the API key or set either GOOGLE_GENAI_API_KEY or GOOGLE_API_KEY environment variable.\\n' +\n        'For more details see https://firebase.google.com/docs/genkit/plugins/google-genai'\n    );\n  const embedder: EmbedderReference =\n    SUPPORTED_MODELS[name] ??\n    embedderRef({\n      name: name,\n      configSchema: GeminiEmbeddingConfigSchema,\n      info: {\n        dimensions: 768,\n        label: `Google AI - ${name}`,\n        supports: {\n          input: ['text'],\n        },\n      },\n    });\n  const apiModelName = embedder.name.startsWith('googleai/')\n    ? embedder.name.substring('googleai/'.length)\n    : embedder.name;\n  return ai.defineEmbedder(\n    {\n      name: embedder.name,\n      configSchema: GeminiEmbeddingConfigSchema,\n      info: embedder.info!,\n    },\n    async (input, options) => {\n      const client = new GoogleGenerativeAI(apiKey!).getGenerativeModel({\n        model:\n          options?.version ||\n          embedder.config?.version ||\n          embedder.version ||\n          apiModelName,\n      });\n      const embeddings = await Promise.all(\n        input.map(async (doc) => {\n          const response = await client.embedContent({\n            taskType: options?.taskType,\n            title: options?.title,\n            content: {\n              role: '',\n              parts: [{ text: doc.text }],\n            },\n          } as EmbedContentRequest);\n          const values = response.embedding.values;\n          return { embedding: values };\n        })\n      );\n      return { embeddings };\n    }\n  );\n}\n"],"mappings":";;;AAgBA,SAA8B,0BAA0B;AACxD,SAAoC,SAAS;AAC7C,SAAS,mBAAmB;AAGrB,MAAM,iBAAiB,EAAE,KAAK;AAAA,EACnC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,CAAC;AAGM,MAAM,8BAA8B,EAAE,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA,EAKlD,UAAU,eAAe,SAAS;AAAA,EAClC,OAAO,EAAE,OAAO,EAAE,SAAS;AAAA,EAC3B,SAAS,EAAE,OAAO,EAAE,SAAS;AAC/B,CAAC;AAIM,MAAM,wBAAwB,YAAY;AAAA,EAC/C,MAAM;AAAA,EACN,cAAc;AAAA,EACd,MAAM;AAAA,IACJ,YAAY;AAAA,IACZ,OAAO;AAAA,IACP,UAAU;AAAA,MACR,OAAO,CAAC,MAAM;AAAA,IAChB;AAAA,EACF;AACF,CAAC;AAEM,MAAM,mBAAmB;AAAA,EAC9B,iBAAiB;AACnB;AAEO,SAAS,uBACd,IACA,MACA,SACA;AA9DF;AA+DE,MAAI,UACF,mCAAS,WACT,QAAQ,IAAI,wBACZ,QAAQ,IAAI;AACd,MAAI,CAAC;AACH,UAAM,IAAI;AAAA,MACR;AAAA,IAEF;AACF,QAAM,YACJ,sBAAiB,IAAI,MAArB,YACA,YAAY;AAAA,IACV;AAAA,IACA,cAAc;AAAA,IACd,MAAM;AAAA,MACJ,YAAY;AAAA,MACZ,OAAO,eAAe,IAAI;AAAA,MAC1B,UAAU;AAAA,QACR,OAAO,CAAC,MAAM;AAAA,MAChB;AAAA,IACF;AAAA,EACF,CAAC;AACH,QAAM,eAAe,SAAS,KAAK,WAAW,WAAW,IACrD,SAAS,KAAK,UAAU,YAAY,MAAM,IAC1C,SAAS;AACb,SAAO,GAAG;AAAA,IACR;AAAA,MACE,MAAM,SAAS;AAAA,MACf,cAAc;AAAA,MACd,MAAM,SAAS;AAAA,IACjB;AAAA,IACA,CAAO,OAAOA,aAAY;AA9F9B,UAAAC;AA+FM,YAAM,SAAS,IAAI,mBAAmB,MAAO,EAAE,mBAAmB;AAAA,QAChE,QACED,YAAA,gBAAAA,SAAS,cACTC,MAAA,SAAS,WAAT,gBAAAA,IAAiB,YACjB,SAAS,WACT;AAAA,MACJ,CAAC;AACD,YAAM,aAAa,MAAM,QAAQ;AAAA,QAC/B,MAAM,IAAI,CAAO,QAAQ;AACvB,gBAAM,WAAW,MAAM,OAAO,aAAa;AAAA,YACzC,UAAUD,YAAA,gBAAAA,SAAS;AAAA,YACnB,OAAOA,YAAA,gBAAAA,SAAS;AAAA,YAChB,SAAS;AAAA,cACP,MAAM;AAAA,cACN,OAAO,CAAC,EAAE,MAAM,IAAI,KAAK,CAAC;AAAA,YAC5B;AAAA,UACF,CAAwB;AACxB,gBAAM,SAAS,SAAS,UAAU;AAClC,iBAAO,EAAE,WAAW,OAAO;AAAA,QAC7B,EAAC;AAAA,MACH;AACA,aAAO,EAAE,WAAW;AAAA,IACtB;AAAA,EACF;AACF;","names":["options","_a"]}